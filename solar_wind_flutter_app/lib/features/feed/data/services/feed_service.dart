import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:hive/hive.dart';
import '../models/user.dart';
import 'package:solar_wind_flutter_app/mock/mock_users.dart';

class FeedService {
  final Dio dio;
  static const String _boxName = 'feedBox';

  FeedService({Dio? dio}) : dio = dio ?? Dio() {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if (!Hive.isAdapterRegistered(UserAdapter().typeId)) {
      Hive.registerAdapter(UserAdapter());
    }
  }

  Future<List<User>> fetchFeed() async {
    print('[FeedService] Starting feed fetch...');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    final prefs = await SharedPreferences.getInstance();
    final telegramId = prefs.getString('telegram_id');
    final token = prefs.getString('token');

    if (telegramId == null || token == null) {
      print('‚ùå Missing credentials');
      throw Exception('Missing token or telegram_id in SharedPreferences');
    }

    try {
      // 2. –ó–∞–ø—Ä–æ—Å –∫ API
      print('üåê Fetching feed from API...');
      final response = await dio.get<List<dynamic>>(
        'https://solar-wind-gymbro.ru/deckShuffle/api/create-deck',
        options: Options(headers: {
          'Authorization-telegram-id': telegramId,
          'Authorize': token,
        }),
      );

      print('‚úÖ API response: ${response.statusCode}');
      print('üì¶ Data type: ${response.data?.runtimeType}');

      if (response.statusCode == 200 && response.data != null) {
        // 3. –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        final users = response.data!
            .map((json) => User.fromJson(json as Map<String, dynamic>))
            .toList();

        print('üë• Fetched ${users.length} real users');

        // 4. –û–±–æ–≥–∞—â–∞–µ–º mock-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        final enriched = [...users, ...mockUsers];
        print('üé≠ Added ${mockUsers.length} mock users');

        // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Hive
        final box = await Hive.openBox<List<dynamic>>(_boxName);
        await box.put('users', enriched.map((u) => u.toJson()).toList());
        print('üíæ Saved ${enriched.length} users to Hive');

        return enriched;
      } else {
        throw Exception('API returned ${response.statusCode}');
      }
    } catch (e) {
      print('‚ö†Ô∏è Error fetching feed: $e');
      print('üîÑ Trying to load from cache...');
      
      try {
        // 6. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞
        final box = await Hive.openBox<List<dynamic>>(_boxName);
        final cachedData = box.get('users');

        if (cachedData != null && cachedData is List) {
          final cachedUsers = cachedData
              .map((json) => User.fromJson(json as Map<String, dynamic>))
              .toList();
          
          print('‚ôªÔ∏è Loaded ${cachedUsers.length} users from cache');
          return cachedUsers;
        }
      } catch (cacheError) {
        print('‚ùå Cache error: $cacheError');
      }

      print('üÜò No cache available, returning mock users');
      return mockUsers; // Fallback
    }
  }
}